{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport cx from \"../util/cx\";\nexport default function DivFactory(defaultClassName, classConfig) {\n  return function (_ref) {\n    var className = _ref.className,\n        children = _ref.children,\n        rest = _objectWithoutProperties(_ref, [\"className\", \"children\"]);\n\n    var otherClasses = [];\n\n    if (!!classConfig) {\n      for (var i in classConfig) {\n        if (!(i in rest)) continue;\n        var curr = classConfig[i]; // We can do this 'as' because classConfig\n        // can only have keys which are in P.\n\n        var val = rest[i]; // If the value of the prop 'i' is defined\n        // in the configuration, we can use it to\n        // add the classes in other classes.\n\n        if (val in curr) {\n          otherClasses.push(curr[val]);\n        }\n      }\n    }\n\n    return __jsx(\"div\", _extends({\n      className: cx.apply(void 0, [defaultClassName, className].concat(otherClasses))\n    }, rest), children);\n  };\n}","map":{"version":3,"sources":["/Users/bryancua/Sites/charityhonor/components/div-factory.tsx"],"names":["React","cx","DivFactory","defaultClassName","classConfig","className","children","rest","otherClasses","i","curr","val","push"],"mappings":";;;AAAA,OAAOA,KAAP,MAAoC,OAApC;AACA,OAAOC,EAAP,MAAe,YAAf;AAQA,eAAe,SAASC,UAAT,CACbC,gBADa,EAEbC,WAFa,EAGC;AACd,SAAO,gBAML;AAAA,QAJEC,SAIF,QAJEA,SAIF;AAAA,QAHEC,QAGF,QAHEA,QAGF;AAAA,QAFKC,IAEL;;AAEA,QAAMC,YAAY,GAAG,EAArB;;AAEA,QAAI,CAAC,CAACJ,WAAN,EAAmB;AACjB,WAAK,IAAMK,CAAX,IAAgBL,WAAhB,EAA6B;AAC3B,YAAI,EAAEK,CAAC,IAAIF,IAAP,CAAJ,EAAkB;AAClB,YAAMG,IAAI,GAAGN,WAAW,CAACK,CAAD,CAAxB,CAF2B,CAI3B;AACA;;AACA,YAAME,GAAG,GAAIJ,IAAD,CAAaE,CAAb,CAAZ,CAN2B,CAQ3B;AACA;AACA;;AACA,YAAIE,GAAG,IAAID,IAAX,EAAgB;AACdF,UAAAA,YAAY,CAACI,IAAb,CAAkBF,IAAI,CAACC,GAAD,CAAtB;AACD;AACF;AACF;;AAED,WACE;AAAK,MAAA,SAAS,EAAEV,EAAE,MAAF,UAAGE,gBAAH,EAAqBE,SAArB,SAAmCG,YAAnC;AAAhB,OAAsED,IAAtE,GACGD,QADH,CADF;AAKD,GAjCD;AAkCD","sourcesContent":["import React, {HTMLAttributes} from 'react'\nimport cx from \"../util/cx\"\n\nexport type DivComponent = React.FunctionComponent<HTMLAttributes<HTMLDivElement>>\n\nexport type DivExtraProps = {\n  [key: string]: string\n}\n\nexport default function DivFactory<P extends DivExtraProps>(\n  defaultClassName: string,\n  classConfig?: { [key in keyof P]?: DivExtraProps }\n): DivComponent {\n  return function (\n    {\n      className,\n      children,\n      ...rest\n    }: HTMLAttributes<HTMLDivElement> & P\n  ) {\n\n    const otherClasses = [];\n\n    if (!!classConfig) {\n      for (const i in classConfig) {\n        if (!(i in rest)) continue\n        const curr = classConfig[i];\n\n        // We can do this 'as' because classConfig\n        // can only have keys which are in P.\n        const val = (rest as P )[i];\n\n        // If the value of the prop 'i' is defined\n        // in the configuration, we can use it to\n        // add the classes in other classes.\n        if (val in curr){\n          otherClasses.push(curr[val])\n        }\n      }\n    }\n\n    return (\n      <div className={cx(defaultClassName, className, ...otherClasses)} {...rest}>\n        {children}\n      </div>\n    )\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}