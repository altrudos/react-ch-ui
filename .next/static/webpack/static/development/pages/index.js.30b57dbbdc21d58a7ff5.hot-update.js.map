{"version":3,"file":"static/webpack/static/development/pages/index.js.30b57dbbdc21d58a7ff5.hot-update.js","sources":["webpack:///./components/async.ts","webpack:///./components/div-factory.tsx","webpack:///./components/icon/index.tsx","webpack:///./components/loading/index.tsx","webpack:///./hooks/use-async.ts","webpack:///./modules/charities/view-charities.tsx","webpack:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///./node_modules/@babel/runtime/helpers/esm/extends.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///./util/cx.ts","webpack:///./util/error.ts","webpack:///./util/string.ts"],"sourcesContent":["\nexport enum AsyncState {\n  Error,\n  Loading,\n  Success,\n  Available\n}\n","import React, {HTMLAttributes} from 'react'\nimport cx from \"../util/cx\"\n\nexport type DivComponent = React.FunctionComponent<HTMLAttributes<HTMLDivElement>>\n\nexport type DivExtraProps = {\n  [key: string]: string\n}\n\nexport default function DivFactory<P extends DivExtraProps>(\n  defaultClassName: string,\n  classConfig?: { [key in keyof P]?: DivExtraProps }\n): DivComponent {\n  return function (\n    {\n      className,\n      children,\n      ...rest\n    }: HTMLAttributes<HTMLDivElement> & P\n  ) {\n\n    const otherClasses = [];\n\n    if (!!classConfig) {\n      for (const i in classConfig) {\n        if (!(i in rest)) continue\n        const curr = classConfig[i];\n\n        // We can do this 'as' because classConfig\n        // can only have keys which are in P.\n        const val = (rest as P )[i];\n\n        // If the value of the prop 'i' is defined\n        // in the configuration, we can use it to\n        // add the classes in other classes.\n        if (val in curr){\n          otherClasses.push(curr[val])\n        }\n      }\n    }\n\n    return (\n      <div className={cx(defaultClassName, className, ...otherClasses)} {...rest}>\n        {children}\n      </div>\n    )\n  }\n}\n\n","import React, {HTMLAttributes} from 'react'\nimport cx from \"../../util/cx\"\n\nexport type IconProps = {\n  suffix: string\n  family: string\n} & HTMLAttributes<HTMLSpanElement>\n\nexport default function Icon(\n  {\n    className,\n    suffix,\n    family,\n    ...rest\n  } : IconProps\n) {\n  return (\n    <i\n      className={cx(family, `${family}-${suffix}`, className)}\n      {...rest}\n    />\n  )\n}","import \"./loading.less\"\nimport React, {HTMLAttributes} from 'react'\nimport DivFactory from \"../div-factory\"\nimport Icon from \"../icon\"\nimport cx from \"../../util/cx\"\n\nexport const LoadingPage = DivFactory(\"loading in-container\")\nexport const LoadingSection = DivFactory(\"loading-section\")\n\nexport function LoadingIcon(\n  {\n    className,\n    ...rest\n  } : HTMLAttributes<HTMLSpanElement>\n) {\n  return (\n    <Icon suffix=\"spin\" family=\"fa\" className={cx(\"fa-circle-notch\", className)} {...rest} />\n  )\n}","import {AsyncState} from \"../components/async\"\nimport {useRef, useState} from \"react\"\nimport {parseError} from \"../util/error\"\n\nexport type StatusItem = {\n  Status: AsyncState,\n  Message: string,\n}\n\nexport type RunAsyncOptions = {\n  AvailableMsg: string\n  AvailableAfterError: boolean\n  ThrowError: boolean\n}\n\nconst DefaultOptions = {\n  AvailableMsg: \"\",\n  AvailableAfterError: true,\n  ThrowError: false\n}\n\nexport type Async = {\n  status: AsyncState,\n  setStatus: (status: AsyncState, err?: string) => void,\n  errMsg: string,\n  runAsync: (fn: () => Promise<void>, options?: RunAsyncOptions) => Promise<void>\n}\n\nexport default function useAsync(\n  defaultState = AsyncState.Available,\n  duration = 300\n): Async {\n\n  // Stores whether it is currently already running or not. If it is running that means we are adding to\n  // the end of the queue, which also means that we should be running any side effects as it will run itself.\n  const isRunning = useRef(false)\n\n  // This is the handle for the interval while it is running. It will be cleared when there are no more\n  // items left in the queue.\n  const it = useRef(null)\n\n  // Queue will store future statuses that should be shown.\n  const queue = useRef<StatusItem[]>([])\n\n  // Current status and message to show (if any)\n  const [status, setStatus] = useState(defaultState)\n  const [errMsg, setErrMsg] = useState(\"\")\n\n  // Next is the iterative process. It will continue until the queue is cleared, where upon it needs to set the\n  // statuses `isRunning` and `it` properly to reset the state.\n  function next() {\n    if (queue.current.length == 0) {\n      isRunning.current = false\n      clearInterval(it.current)\n      it.current = null\n      return\n    }\n    const curr = queue.current.shift()\n    setStatus(curr.Status)\n    setErrMsg(curr.Message)\n  }\n\n  function _setStatus(status: AsyncState, err: string = \"\") {\n    queue.current.push({\n      Status: status,\n      Message: err,\n    })\n    if (isRunning.current) {\n      return\n    }\n\n    isRunning.current = true\n    it.current = setInterval(next, duration)\n  }\n\n  return {\n    status,\n    setStatus: _setStatus,\n    errMsg,\n    runAsync: async (fn: () => Promise<void>, options: RunAsyncOptions = {...DefaultOptions}) => {\n      _setStatus(AsyncState.Loading)\n      try {\n        await fn()\n        _setStatus(AsyncState.Success)\n        _setStatus(AsyncState.Available, options.AvailableMsg)\n      } catch (err) {\n        console.log({...err})\n        _setStatus(AsyncState.Error, parseError(err))\n        if (options.AvailableAfterError) _setStatus(AsyncState.Available, options.AvailableMsg)\n        if (options.ThrowError) throw err\n      }\n    }\n  }\n}","import React from 'react'\nimport useAsync from \"../../hooks/use-async\"\nimport {AsyncState} from \"../../components/async\"\nimport {LoadingPage} from \"../../components/loading\"\n\nexport default function CharitiesView() {\n\n  const [charities, setCharities] = [];\n  const {\n    status,\n    runAsync\n  } = useAsync(AsyncState.Available)\n\n\n  switch(status) {\n    case AsyncState.Loading:\n      return (\n        <LoadingPage />\n      )\n  }\n\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import {addToStringList} from \"./string\"\n\nexport type ClassNameConfig = string | { [key: string]: boolean };\n\n/**\n * cx groups provided terms together as a list of HTML classes.\n * @param x is either a string or an object with classes as the key and a boolean as the value.\n *  a value of true means to include it in the classlist.\n */\nexport default function cx( ...x : ClassNameConfig[] ) : string {\n  const str : string[] = [];\n\n  x.forEach( x => {\n    if ( typeof(x) === \"string\" ) {\n      addToStringList(str, x)\n      return\n    }\n\n    for(let i in x) {\n      if (x[i]) {\n        addToStringList(str, i)\n      }\n    }\n  } )\n\n  return str.join(\" \")\n}","import {AxiosError} from \"axios\"\n\nexport function parseError(err: Error | AxiosError) : string {\n  if ('response' in err){\n    if (!err.response || !err.response.data) return \"Network Error\"\n    return err.response.data.Message\n  }\n  return err.message\n}","\nexport function stringInList(xs : string[], x : string) : boolean {\n  return !!xs.find(s => s === x)\n}\n\nexport function addToStringList(xs : string[], x : string) {\n  if (stringInList(xs, x)) return\n  xs.push(x)\n}"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AAQA;AAIA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AAOA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AADA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AAaA;AACA;AACA;AACA;AAHA;AAaA;AAGA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AAZA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAkBA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AACA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAkBA;;;;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AAFA;AAOA;;;;;;;;;;;;ACrBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACbA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;AAKA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;ACxBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;;;;A","sourceRoot":""}